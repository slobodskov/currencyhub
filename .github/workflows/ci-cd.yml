name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: currencyhub
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file from secrets
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
          DB_PASSWORD: password
        run: |
          # ИСПРАВЛЕНО: Правильная последовательность создания .env файла
          echo "TELEGRAM_TOKEN=$TELEGRAM_TOKEN" > .env
          echo "COINGECKO_API_KEY=$COINGECKO_API_KEY" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "✅ .env file created successfully"
          cat .env  # Для отладки - показываем содержимое файла

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run tests
        env:
          DB_PASSWORD: password
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
        run: |
          echo "Running tests with environment variables..."
          go test ./... -v

  build-only:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        env:
          DB_PASSWORD: password
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
        run: |
          echo "TELEGRAM_TOKEN=$TELEGRAM_TOKEN" > .env
          echo "COINGECKO_API_KEY=$COINGECKO_API_KEY" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "✅ .env file for Docker created"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image (without push)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: local-build:latest
          load: true

      - name: Verify image
        run: |
          echo "✅ Docker image built successfully"
          docker images